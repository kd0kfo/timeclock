#!/usr/bin/env python

from os.path import isfile, join
from os import getenv, getcwd
from sys import argv
from timeclock.clock import Clock
from timeclock import get_timestamp
from getopt import getopt, GetoptError


DEFAULT_CLOCK_FILE = "clock.dat"
clock_path = join(getcwd(), DEFAULT_CLOCK_FILE)
payrate = None

def load_config(config_path):
    import ConfigParser
    global clock_path

    config = ConfigParser.RawConfigParser()
    config.read(config_path)

    if config.has_option("main", "clock_path"):
        clock_path = config.get("main", "clock_path")


def display_times(_clock, name_map=None):
    _clock.print_times(alphabetic=True, name_map=name_map, payrate=payrate)
    total_time = _clock.total_time()
    print("---")
    print("Total counted time: {0} seconds ({1:.2f} hrs)"
          .format(total_time, total_time / 3600.))


def stop_all(clock, punch_time=None):
    for task in clock.running_tasks():
        clock.punch(task[0], punch_time)


CONFIG_FILENAME = ".timeclockrc"
HOMEDIR = getenv("HOME")
config_path = join(HOMEDIR, CONFIG_FILENAME)
if HOMEDIR and isfile(config_path):
    load_config(config_path)


clock = Clock(clock_path)
manual_punch = None
should_switch = False
name_map = {}

short_opts = "f:hm:n:p:s"
long_opts = ["file", "help", "manual=", "names=", "payrate=", "switch"]
commands = {"categories": "List categories in clock",
            "last": "Last punch",
            "longest": "Print the longest time period in category",
            "print": "Print time summary",
            "running": "List all running processes",
            "stop": "Stop all running processes",
            "total": "Print total time"}

try:
    (opts, args) = getopt(argv[1:], short_opts, long_opts)
except GetoptError as ge:
    from sys import stderr
    stderr.write("Error parsing arguments\n")
    raise ge


for (opt, optarg) in opts:
    while opt[0] == "-":
        opt = opt[1:]
    if opt in ["f", "file"]:
        clock = Clock(optarg)
    elif opt in ["h", "help"]:
        print("Command Summary:")
        for cmd in commands:
            print("{0}: {1}".format(cmd, commands[cmd]))
        print("")
        print("Command line arguments: {0}"
              .format(", ".join(sorted(long_opts))))
        exit(0)
    elif opt in ["m", "manual"]:
        manual_punch = int(optarg)
    elif opt in ["n", "names"]:
        from timeclock import load_name_map
        name_map.update(load_name_map(optarg))
    elif opt in ["s", "switch"]:
        should_switch = True
    elif opt in ["p", "payrate"]:
        payrate = float(optarg)


if not args:
    display_times(clock, name_map)
    exit(0)


command = args[0]

if command == "categories":
    print(", ".join(sorted(clock.get_categories())))
elif command == "last":
    last_punch = clock.last_punch()
    if last_punch:
        import time
        timestring = time.strftime("%Y-%m-%d %H:%M",
                                   time.localtime(last_punch[1]))
        print("Last punch: {0} at {1}"
              .format(last_punch[0], timestring))
    else:
        print("No punch yet")
elif command == "longest":
    longest = clock.largest_running_time(args[1])
    if longest:
        print("Longest time {0} seconds was started on {1} and ended on {2}"
              .format(longest[0], longest[1], longest[2]))
elif command == "print":
    display_times(clock, name_map)
elif command == "running":
    now = get_timestamp()
    for task in clock.running_tasks():
        print("{0}: {1} seconds".format(task[0], now - task[1]))
elif command == "stop":
    stop_all(clock, manual_punch)
elif command == "total":
    times = sorted(clock.get_timestamps())
    print("Started on {0}".format(times[0]))
    print("Last punch on {0}".format(times[-1]))
    print("Total time span: {0} seconds".format(times[-1] - times[0]))
else:
    if should_switch:
        stop_all(clock, manual_punch)
    clock.punch(command, manual_punch)
